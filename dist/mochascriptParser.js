/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mochascriptParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"pgm":3,"sexplist":4,"ENDOFFILE":5,"sexplisti":6,"sexp":7,"slet":8,"sif":9,"sswitch":10,"sset":11,"sprop":12,"smcall":13,"sdef":14,"sfn":15,"LPAREN":16,"id":17,"params":18,"RPAREN":19,"mathy":20,"MATHY":21,"exp":22,"LET":23,"letparams":24,"IF":25,"NUMBER":26,"STRING":27,"jsdata":28,"jsobject":29,"jsarray":30,"LCURLY":31,"jskeyvalpairs":32,"RCURLY":33,"jskey":34,"COLON":35,"LBRACKET":36,"jsarrayentries":37,"RBRACKET":38,"SWITCH":39,"caselist":40,"SET":41,"DEF":42,"mcall":43,"propaccess":44,"FN":45,"fnparams":46,"ID":47,"MCALL":48,"PROPACCESS":49,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",16:"LPAREN",19:"RPAREN",21:"MATHY",23:"LET",25:"IF",26:"NUMBER",27:"STRING",31:"LCURLY",33:"RCURLY",35:"COLON",36:"LBRACKET",38:"RBRACKET",39:"SWITCH",41:"SET",42:"DEF",45:"FN",47:"ID",48:"MCALL",49:"PROPACCESS"},
productions_: [0,[3,2],[4,1],[6,2],[6,0],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,4],[7,4],[20,1],[18,2],[18,0],[8,7],[24,3],[24,0],[9,5],[9,6],[22,1],[22,1],[22,1],[22,1],[22,1],[28,1],[28,1],[29,3],[32,4],[32,0],[34,1],[34,1],[30,3],[37,2],[37,0],[10,5],[40,3],[40,0],[11,5],[11,5],[14,5],[13,5],[12,4],[15,7],[46,2],[46,0],[17,1],[43,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return "(function() {" + $$[$0-1] + "})();";
break;
case 2:
			var list = $$[$0];
			list[list.length - 1] = "return " + list[list.length - 1];
			this.$ = list.join(";\n");
		
break;
case 3:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 4:this.$ = [];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = $$[$0];
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0-2] + "(" + $$[$0-1] + ")"
break;
case 14:
			var fn;
			switch($$[$0-2]) {
			case '=':
				fn = 'eq';
				break;
			case '+':
				fn = 'plus';
				break;
			case '-':
				fn = 'minus';
				break;
			case '*':
				fn = 'times';
				break;
			case '>':
				fn = 'gt';
				break;
			case '<':
				fn = 'lt';
				break;
			case '>=':
				fn = 'gte';
				break;
			case '<=':
				fn = 'lte';
				break;
			case '/':
				fn = 'divide';
				break;
			}

			// TODO: another example of why we need to build a graph of nodes first.
			var count = $$[$0-1].split(",").length;
			if (count == 2) {
				this.$ = 'b' + fn + "(" + $$[$0-1] + ")";
			} else if(count == 1) {
				this.$ = 'u' + fn + "(" + $$[$0-1] + ")";
			} else {
				this.$ = fn + ".call(null, " + $$[$0-1] + ")";
			}
		
break;
case 15:this.$ = $$[$0]
break;
case 16:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 17:this.$ = '';
break;
case 18:this.$ = "(function() { " + $$[$0-3] + "\n" + $$[$0-1] + "\n})()";
break;
case 19:this.$ = "var " + $$[$0-2] + " = " + $$[$0-1] + ";\n" + $$[$0];
break;
case 20:this.$ = '';
break;
case 21:this.$ = "(" + $$[$0-2] + " ? " + $$[$0-1] + " : null)\n";
break;
case 22:this.$ = "(" + $$[$0-3] + " ? " + $$[$0-2] + " : " + $$[$0-1] + ")\n";
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = yytext;
break;
case 25:this.$ = yytext;
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0]
break;
case 29:this.$ = $$[$0]
break;
case 30:this.$ = "{" + $$[$0-1] + "}"
break;
case 31:this.$ = $$[$0-3] + ":" + paramStr($$[$0-1], $$[$0]);
break;
case 32:this.$ = '';
break;
case 33:this.$ = $$[$0]
break;
case 34:this.$ = yytext
break;
case 35:this.$ = "[" + $$[$0-1] + "]"
break;
case 36:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 37:this.$ = '';
break;
case 38:this.$ = "(function() {\n var __res; switch (" + $$[$0-2] + ") {\n" + $$[$0-1] + "\n}\n return __res;})()";
break;
case 39:this.$ = "case " + $$[$0-2] + ":\n\t" + __res = $$[$0-1] + "break;\n" + $$[$0];
break;
case 40:this.$ = '';
break;
case 41:this.$ = "(" + $$[$0-2] + " = " + $$[$0-1] + ")";
break;
case 42:this.$ = "(" + $$[$0-2] + " = " + $$[$0-1] + ")";
break;
case 43:this.$ = "var " + $$[$0-2] + " = " + $$[$0-1] + ";\n";
break;
case 44:this.$ = "(" + $$[$0-2] + ")" + $$[$0-3] + "(" + $$[$0-1] + ")";
break;
case 45:this.$ = "(" + $$[$0-1] + ")." + $$[$0-2];
break;
case 46:this.$ = "\nfunction(" + $$[$0-3] + ") {\n" + $$[$0-1] + "\n}\n";
break;
case 47:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 48:this.$ = '';
break;
case 49:this.$ = yytext;
break;
case 50:this.$ = yytext;
break;
case 51:this.$ = yytext.substring(1);
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13]},{1:[3]},{5:[1,14]},{5:[2,2],19:[2,2]},{5:[2,4],6:15,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],19:[2,4]},{5:[2,5],16:[2,5],19:[2,5],26:[2,5],27:[2,5],31:[2,5],33:[2,5],36:[2,5],38:[2,5],47:[2,5]},{5:[2,6],16:[2,6],19:[2,6],26:[2,6],27:[2,6],31:[2,6],33:[2,6],36:[2,6],38:[2,6],47:[2,6]},{5:[2,7],16:[2,7],19:[2,7],26:[2,7],27:[2,7],31:[2,7],33:[2,7],36:[2,7],38:[2,7],47:[2,7]},{5:[2,8],16:[2,8],19:[2,8],26:[2,8],27:[2,8],31:[2,8],33:[2,8],36:[2,8],38:[2,8],47:[2,8]},{5:[2,9],16:[2,9],19:[2,9],26:[2,9],27:[2,9],31:[2,9],33:[2,9],36:[2,9],38:[2,9],47:[2,9]},{5:[2,10],16:[2,10],19:[2,10],26:[2,10],27:[2,10],31:[2,10],33:[2,10],36:[2,10],38:[2,10],47:[2,10]},{5:[2,11],16:[2,11],19:[2,11],26:[2,11],27:[2,11],31:[2,11],33:[2,11],36:[2,11],38:[2,11],47:[2,11]},{5:[2,12],16:[2,12],19:[2,12],26:[2,12],27:[2,12],31:[2,12],33:[2,12],36:[2,12],38:[2,12],47:[2,12]},{17:16,20:17,21:[1,27],23:[1,18],25:[1,19],39:[1,20],41:[1,21],42:[1,24],43:23,44:22,45:[1,25],47:[1,26],48:[1,29],49:[1,28]},{1:[2,1]},{5:[2,3],19:[2,3]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,18:30,19:[2,17],22:31,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,18:41,19:[2,17],22:31,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{16:[1,42]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:43,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:44,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{12:46,16:[1,47],17:45,47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:48,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:49,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{17:50,47:[1,26]},{16:[1,51]},{16:[2,49],19:[2,49],26:[2,49],27:[2,49],31:[2,49],33:[2,49],35:[2,49],36:[2,49],38:[2,49],47:[2,49]},{16:[2,15],19:[2,15],26:[2,15],27:[2,15],31:[2,15],36:[2,15],47:[2,15]},{16:[2,51],26:[2,51],27:[2,51],31:[2,51],36:[2,51],47:[2,51]},{16:[2,50],26:[2,50],27:[2,50],31:[2,50],36:[2,50],47:[2,50]},{19:[1,52]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,18:53,19:[2,17],22:31,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{16:[2,23],19:[2,23],26:[2,23],27:[2,23],31:[2,23],33:[2,23],36:[2,23],38:[2,23],47:[2,23]},{16:[2,24],19:[2,24],26:[2,24],27:[2,24],31:[2,24],33:[2,24],36:[2,24],38:[2,24],47:[2,24]},{16:[2,25],19:[2,25],26:[2,25],27:[2,25],31:[2,25],33:[2,25],36:[2,25],38:[2,25],47:[2,25]},{16:[2,26],19:[2,26],26:[2,26],27:[2,26],31:[2,26],33:[2,26],36:[2,26],38:[2,26],47:[2,26]},{16:[2,27],19:[2,27],26:[2,27],27:[2,27],31:[2,27],33:[2,27],36:[2,27],38:[2,27],47:[2,27]},{16:[2,28],19:[2,28],26:[2,28],27:[2,28],31:[2,28],33:[2,28],36:[2,28],38:[2,28],47:[2,28]},{16:[2,29],19:[2,29],26:[2,29],27:[2,29],31:[2,29],33:[2,29],36:[2,29],38:[2,29],47:[2,29]},{17:56,27:[1,57],32:54,33:[2,32],34:55,47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:59,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],37:58,38:[2,37],47:[1,26]},{19:[1,60]},{17:62,19:[2,20],24:61,47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:63,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,19:[2,40],22:65,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],40:64,47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:66,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:67,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{44:22,49:[1,28]},{19:[1,68]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,18:69,19:[2,17],22:31,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:70,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{17:72,19:[2,48],46:71,47:[1,26]},{5:[2,13],16:[2,13],19:[2,13],26:[2,13],27:[2,13],31:[2,13],33:[2,13],36:[2,13],38:[2,13],47:[2,13]},{19:[2,16]},{33:[1,73]},{35:[1,74]},{35:[2,33]},{35:[2,34]},{38:[1,75]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:59,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],37:76,38:[2,37],47:[1,26]},{5:[2,14],16:[2,14],19:[2,14],26:[2,14],27:[2,14],31:[2,14],33:[2,14],36:[2,14],38:[2,14],47:[2,14]},{19:[1,77]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:78,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,19:[1,79],22:80,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{19:[1,81]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:82,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{19:[1,83]},{19:[1,84]},{5:[2,45],16:[2,45],19:[2,45],26:[2,45],27:[2,45],31:[2,45],33:[2,45],36:[2,45],38:[2,45],47:[2,45]},{19:[1,85]},{19:[1,86]},{19:[1,87]},{17:72,19:[2,48],46:88,47:[1,26]},{16:[2,30],19:[2,30],26:[2,30],27:[2,30],31:[2,30],33:[2,30],36:[2,30],38:[2,30],47:[2,30]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,22:89,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],47:[1,26]},{16:[2,35],19:[2,35],26:[2,35],27:[2,35],31:[2,35],33:[2,35],36:[2,35],38:[2,35],47:[2,35]},{38:[2,36]},{4:90,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],19:[2,4]},{17:62,19:[2,20],24:91,47:[1,26]},{5:[2,21],16:[2,21],19:[2,21],26:[2,21],27:[2,21],31:[2,21],33:[2,21],36:[2,21],38:[2,21],47:[2,21]},{19:[1,92]},{5:[2,38],16:[2,38],19:[2,38],26:[2,38],27:[2,38],31:[2,38],33:[2,38],36:[2,38],38:[2,38],47:[2,38]},{7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],17:32,19:[2,40],22:65,26:[1,33],27:[1,34],28:35,29:37,30:38,31:[1,39],36:[1,40],40:93,47:[1,26]},{5:[2,41],16:[2,41],19:[2,41],26:[2,41],27:[2,41],31:[2,41],33:[2,41],36:[2,41],38:[2,41],47:[2,41]},{5:[2,42],16:[2,42],19:[2,42],26:[2,42],27:[2,42],31:[2,42],33:[2,42],36:[2,42],38:[2,42],47:[2,42]},{5:[2,44],16:[2,44],19:[2,44],26:[2,44],27:[2,44],31:[2,44],33:[2,44],36:[2,44],38:[2,44],47:[2,44]},{5:[2,43],16:[2,43],19:[2,43],26:[2,43],27:[2,43],31:[2,43],33:[2,43],36:[2,43],38:[2,43],47:[2,43]},{4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:[1,13],19:[2,4]},{19:[2,47]},{17:56,27:[1,57],32:95,33:[2,32],34:55,47:[1,26]},{19:[1,96]},{19:[2,19]},{5:[2,22],16:[2,22],19:[2,22],26:[2,22],27:[2,22],31:[2,22],33:[2,22],36:[2,22],38:[2,22],47:[2,22]},{19:[2,39]},{19:[1,97]},{33:[2,31]},{5:[2,18],16:[2,18],19:[2,18],26:[2,18],27:[2,18],31:[2,18],33:[2,18],36:[2,18],38:[2,18],47:[2,18]},{5:[2,46],16:[2,46],19:[2,46],26:[2,46],27:[2,46],31:[2,46],33:[2,46],36:[2,46],38:[2,46],47:[2,46]}],
defaultActions: {14:[2,1],53:[2,16],56:[2,33],57:[2,34],76:[2,36],88:[2,47],91:[2,19],93:[2,39],95:[2,31]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function paramStr(a1, a2) {
		if (a2 != '')
			return a1 + "," + a2;
		else
			return a1;
	}

	function sexpStr(a1, a2) {
		if (a2 != '')
			return a1 + ";\n" + a2 + ";";
		else
			return a1 + ";\n";
	}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:return 16;
break;
case 2:return 19;
break;
case 3:return 41;
break;
case 4:return 27;
break;
case 5:return 27;
break;
case 6:return 26;
break;
case 7:return 42;
break;
case 8:return 23;
break;
case 9:return 25;
break;
case 10:return 39;
break;
case 11:return 45;
break;
case 12:return 48;
break;
case 13:return 49;
break;
case 14:return 47;
break;
case 15:return 35;
break;
case 16:return 'COMMA';
break;
case 17:return 31;
break;
case 18:return 33;
break;
case 19:return 36;
break;
case 20:return 38;
break;
case 21:return 21;
break;
case 22:return 21;
break;
case 23:return 21;
break;
case 24:return 21;
break;
case 25:return 21;
break;
case 26:return 21;
break;
case 27:return 21;
break;
case 28:return 21;
break;
case 29:return 21;
break;
case 30:/* skip whitespace */
break;
case 31:return 5;
break;
}
},
rules: [/^(?:;.*)/,/^(?:\()/,/^(?:\))/,/^(?:!)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:([-]?[0-9]*\.?[0-9]+))/,/^(?:def\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:fn\b)/,/^(?:(\.[a-zA-Z$_][a-zA-Z0-9$_]*))/,/^(?:(:[a-zA-Z$_][a-zA-Z0-9$_]*))/,/^(?:([a-zA-Z$_][a-zA-Z0-9$_]*))/,/^(?::)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\/)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mochascriptParser;
exports.Parser = mochascriptParser.Parser;
exports.parse = function () { return mochascriptParser.parse.apply(mochascriptParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}