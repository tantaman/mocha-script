/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mochascriptParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"pgm":3,"sexplist":4,"ENDOFFILE":5,"sexplisti":6,"sexp":7,"slet":8,"sif":9,"sswitch":10,"sset":11,"sprop":12,"sfn":13,"LPAREN":14,"id":15,"params":16,"RPAREN":17,"mathy":18,"MATHY":19,"exp":20,"LET":21,"letparams":22,"IF":23,"NUMBER":24,"STRING":25,"jsdata":26,"jsobject":27,"jsarray":28,"LCURLY":29,"jskeyvalpairs":30,"RCURLY":31,"jskey":32,"COLON":33,"LBRACKET":34,"jsarrayentries":35,"RBRACKET":36,"SWITCH":37,"caselist":38,"SET":39,"propaccess":40,"FN":41,"fnparams":42,"ID":43,"PROPACCESS":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",14:"LPAREN",17:"RPAREN",19:"MATHY",21:"LET",23:"IF",24:"NUMBER",25:"STRING",29:"LCURLY",31:"RCURLY",33:"COLON",34:"LBRACKET",36:"RBRACKET",37:"SWITCH",39:"SET",41:"FN",43:"ID",44:"PROPACCESS"},
productions_: [0,[3,2],[4,1],[6,2],[6,0],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,4],[7,4],[18,1],[16,2],[16,0],[8,7],[22,3],[22,0],[9,5],[9,6],[20,1],[20,1],[20,1],[20,1],[20,1],[26,1],[26,1],[27,3],[30,4],[30,0],[32,1],[32,1],[28,3],[35,2],[35,0],[10,5],[38,3],[38,0],[11,5],[11,5],[12,4],[13,7],[42,2],[42,0],[15,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return "(function() {" + $$[$0-1] + "})();";
break;
case 2:
			var list = $$[$0];
			list[list.length - 1] = "return " + list[list.length - 1];
			this.$ = list.join(";\n");
		
break;
case 3:
			if ($$[$0] != '')
				this.$ = [$$[$0-1]].concat($$[$0]);
			else
				this.$ = [$$[$0-1]];
		
break;
case 4:this.$ = '';
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = $$[$0-2] + "(" + $$[$0-1] + ")"
break;
case 12:
			var fn;
			switch($$[$0-2]) {
			case '=':
				fn = 'eq';
				break;
			case '+':
				fn = 'plus';
				break;
			case '-':
				fn = 'minus';
				break;
			case '*':
				fn = 'times';
				break;
			case '>':
				fn = 'gt';
				break;
			case '<':
				fn = 'lt';
				break;
			case '>=':
				fn = 'gte';
				break;
			case '<=':
				fn = 'lte';
				break;
			case '/':
				fn = 'divide';
				break;
			}

			// TODO: another example of why we need to build a graph of nodes first.
			var count = $$[$0-1].split(",").length;
			if (count == 2) {
				this.$ = 'b' + fn + "(" + $$[$0-1] + ")";
			} else if(count == 1) {
				this.$ = 'u' + fn + "(" + $$[$0-1] + ")";
			} else {
				this.$ = fn + ".call(null, " + $$[$0-1] + ")";
			}
		
break;
case 13:this.$ = $$[$0]
break;
case 14:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 15:this.$ = '';
break;
case 16:this.$ = "(function() { " + $$[$0-3] + "\n" + $$[$0-1] + "\n})()";
break;
case 17:this.$ = "var " + $$[$0-2] + " = " + $$[$0-1] + ";\n" + $$[$0];
break;
case 18:this.$ = '';
break;
case 19:this.$ = "(" + $$[$0-2] + " ? " + $$[$0-1] + " : null)\n";
break;
case 20:this.$ = "(" + $$[$0-3] + " ? " + $$[$0-2] + " : " + $$[$0-1] + ")\n";
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = yytext;
break;
case 23:this.$ = yytext;
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0]
break;
case 27:this.$ = $$[$0]
break;
case 28:this.$ = "{" + $$[$0-1] + "}"
break;
case 29:this.$ = $$[$0-3] + ":" + paramStr($$[$0-1], $$[$0]);
break;
case 30:this.$ = '';
break;
case 31:this.$ = $$[$0]
break;
case 32:this.$ = yytext
break;
case 33:this.$ = "[" + $$[$0-1] + "]"
break;
case 34:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 35:this.$ = '';
break;
case 36:this.$ = "(function() {\n var __res; switch (" + $$[$0-2] + ") {\n" + $$[$0-1] + "\n}\n return __res;})()";
break;
case 37:this.$ = "case " + $$[$0-2] + ":\n\t" + __res = $$[$0-1] + "break;\n" + $$[$0];
break;
case 38:this.$ = '';
break;
case 39:this.$ = "(" + $$[$0-2] + " = " + $$[$0-1] + ")";
break;
case 40:this.$ = "(" + $$[$0-2] + " = " + $$[$0-1] + ")";
break;
case 41:this.$ = "(" + $$[$0-1] + ")" + $$[$0-2];
break;
case 42:this.$ = "\nfunction(" + $$[$0-3] + ") {\n" + $$[$0-1] + "\n}\n";
break;
case 43:this.$ = paramStr($$[$0-1], $$[$0]);
break;
case 44:this.$ = '';
break;
case 45:this.$ = yytext;
break;
case 46:this.$ = yytext;
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11]},{1:[3]},{5:[1,12]},{5:[2,2],17:[2,2]},{5:[2,4],6:13,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,4]},{5:[2,5],14:[2,5],17:[2,5],24:[2,5],25:[2,5],29:[2,5],31:[2,5],34:[2,5],36:[2,5],43:[2,5]},{5:[2,6],14:[2,6],17:[2,6],24:[2,6],25:[2,6],29:[2,6],31:[2,6],34:[2,6],36:[2,6],43:[2,6]},{5:[2,7],14:[2,7],17:[2,7],24:[2,7],25:[2,7],29:[2,7],31:[2,7],34:[2,7],36:[2,7],43:[2,7]},{5:[2,8],14:[2,8],17:[2,8],24:[2,8],25:[2,8],29:[2,8],31:[2,8],34:[2,8],36:[2,8],43:[2,8]},{5:[2,9],14:[2,9],17:[2,9],24:[2,9],25:[2,9],29:[2,9],31:[2,9],34:[2,9],36:[2,9],43:[2,9]},{5:[2,10],14:[2,10],17:[2,10],24:[2,10],25:[2,10],29:[2,10],31:[2,10],34:[2,10],36:[2,10],43:[2,10]},{15:14,18:15,19:[1,23],21:[1,16],23:[1,17],37:[1,18],39:[1,19],40:20,41:[1,21],43:[1,22],44:[1,24]},{1:[2,1]},{5:[2,3],17:[2,3]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,16:25,17:[2,15],20:26,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,16:36,17:[2,15],20:26,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{14:[1,37]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:38,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:39,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{12:41,14:[1,42],15:40,43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:43,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{14:[1,44]},{14:[2,45],17:[2,45],24:[2,45],25:[2,45],29:[2,45],31:[2,45],33:[2,45],34:[2,45],36:[2,45],43:[2,45]},{14:[2,13],17:[2,13],24:[2,13],25:[2,13],29:[2,13],34:[2,13],43:[2,13]},{14:[2,46],24:[2,46],25:[2,46],29:[2,46],34:[2,46],43:[2,46]},{17:[1,45]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,16:46,17:[2,15],20:26,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{14:[2,21],17:[2,21],24:[2,21],25:[2,21],29:[2,21],31:[2,21],34:[2,21],36:[2,21],43:[2,21]},{14:[2,22],17:[2,22],24:[2,22],25:[2,22],29:[2,22],31:[2,22],34:[2,22],36:[2,22],43:[2,22]},{14:[2,23],17:[2,23],24:[2,23],25:[2,23],29:[2,23],31:[2,23],34:[2,23],36:[2,23],43:[2,23]},{14:[2,24],17:[2,24],24:[2,24],25:[2,24],29:[2,24],31:[2,24],34:[2,24],36:[2,24],43:[2,24]},{14:[2,25],17:[2,25],24:[2,25],25:[2,25],29:[2,25],31:[2,25],34:[2,25],36:[2,25],43:[2,25]},{14:[2,26],17:[2,26],24:[2,26],25:[2,26],29:[2,26],31:[2,26],34:[2,26],36:[2,26],43:[2,26]},{14:[2,27],17:[2,27],24:[2,27],25:[2,27],29:[2,27],31:[2,27],34:[2,27],36:[2,27],43:[2,27]},{15:49,25:[1,50],30:47,31:[2,30],32:48,43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:52,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],35:51,36:[2,35],43:[1,22]},{17:[1,53]},{15:55,17:[2,18],22:54,43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:56,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,17:[2,38],20:58,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],38:57,43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:59,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:60,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{40:20,44:[1,24]},{17:[1,61]},{15:63,17:[2,44],42:62,43:[1,22]},{5:[2,11],14:[2,11],17:[2,11],24:[2,11],25:[2,11],29:[2,11],31:[2,11],34:[2,11],36:[2,11],43:[2,11]},{17:[2,14]},{31:[1,64]},{33:[1,65]},{33:[2,31]},{33:[2,32]},{36:[1,66]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:52,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],35:67,36:[2,35],43:[1,22]},{5:[2,12],14:[2,12],17:[2,12],24:[2,12],25:[2,12],29:[2,12],31:[2,12],34:[2,12],36:[2,12],43:[2,12]},{17:[1,68]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:69,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,17:[1,70],20:71,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{17:[1,72]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:73,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{17:[1,74]},{17:[1,75]},{5:[2,41],14:[2,41],17:[2,41],24:[2,41],25:[2,41],29:[2,41],31:[2,41],34:[2,41],36:[2,41],43:[2,41]},{17:[1,76]},{15:63,17:[2,44],42:77,43:[1,22]},{14:[2,28],17:[2,28],24:[2,28],25:[2,28],29:[2,28],31:[2,28],34:[2,28],36:[2,28],43:[2,28]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,20:78,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],43:[1,22]},{14:[2,33],17:[2,33],24:[2,33],25:[2,33],29:[2,33],31:[2,33],34:[2,33],36:[2,33],43:[2,33]},{36:[2,34]},{4:79,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,4]},{15:55,17:[2,18],22:80,43:[1,22]},{5:[2,19],14:[2,19],17:[2,19],24:[2,19],25:[2,19],29:[2,19],31:[2,19],34:[2,19],36:[2,19],43:[2,19]},{17:[1,81]},{5:[2,36],14:[2,36],17:[2,36],24:[2,36],25:[2,36],29:[2,36],31:[2,36],34:[2,36],36:[2,36],43:[2,36]},{7:31,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],15:27,17:[2,38],20:58,24:[1,28],25:[1,29],26:30,27:32,28:33,29:[1,34],34:[1,35],38:82,43:[1,22]},{5:[2,39],14:[2,39],17:[2,39],24:[2,39],25:[2,39],29:[2,39],31:[2,39],34:[2,39],36:[2,39],43:[2,39]},{5:[2,40],14:[2,40],17:[2,40],24:[2,40],25:[2,40],29:[2,40],31:[2,40],34:[2,40],36:[2,40],43:[2,40]},{4:83,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],17:[2,4]},{17:[2,43]},{15:49,25:[1,50],30:84,31:[2,30],32:48,43:[1,22]},{17:[1,85]},{17:[2,17]},{5:[2,20],14:[2,20],17:[2,20],24:[2,20],25:[2,20],29:[2,20],31:[2,20],34:[2,20],36:[2,20],43:[2,20]},{17:[2,37]},{17:[1,86]},{31:[2,29]},{5:[2,16],14:[2,16],17:[2,16],24:[2,16],25:[2,16],29:[2,16],31:[2,16],34:[2,16],36:[2,16],43:[2,16]},{5:[2,42],14:[2,42],17:[2,42],24:[2,42],25:[2,42],29:[2,42],31:[2,42],34:[2,42],36:[2,42],43:[2,42]}],
defaultActions: {12:[2,1],46:[2,14],49:[2,31],50:[2,32],67:[2,34],77:[2,43],80:[2,17],82:[2,37],84:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function paramStr(a1, a2) {
		if (a2 != '')
			return a1 + "," + a2;
		else
			return a1;
	}

	function sexpStr(a1, a2) {
		if (a2 != '')
			return a1 + ";\n" + a2 + ";";
		else
			return a1 + ";\n";
	}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:return 14;
break;
case 2:return 17;
break;
case 3:return 39;
break;
case 4:return 25;
break;
case 5:return 25;
break;
case 6:return 24;
break;
case 7:return 21;
break;
case 8:return 23;
break;
case 9:return 37;
break;
case 10:return 41;
break;
case 11:return 44;
break;
case 12:return 43;
break;
case 13:return 33;
break;
case 14:return 'COMMA';
break;
case 15:return 29;
break;
case 16:return 31;
break;
case 17:return 34;
break;
case 18:return 36;
break;
case 19:return 19;
break;
case 20:return 19;
break;
case 21:return 19;
break;
case 22:return 19;
break;
case 23:return 19;
break;
case 24:return 19;
break;
case 25:return 19;
break;
case 26:return 19;
break;
case 27:return 19;
break;
case 28:/* skip whitespace */
break;
case 29:return 5;
break;
}
},
rules: [/^(?:;.*)/,/^(?:\()/,/^(?:\))/,/^(?:!)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:([-]?[0-9]*\.?[0-9]+))/,/^(?:let\b)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:fn\b)/,/^(?:(\.[a-zA-Z$_][a-zA-Z0-9$_]*))/,/^(?:([a-zA-Z$_][a-zA-Z0-9$_]*))/,/^(?::)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\/)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mochascriptParser;
exports.Parser = mochascriptParser.Parser;
exports.parse = function () { return mochascriptParser.parse.apply(mochascriptParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}