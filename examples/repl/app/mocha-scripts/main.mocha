(require [] (fn ()
	(def mirror 
		(CodeMirror.fromTextArea (get ($.find "#repl-in") 0) {mode: "text/x-clojure"}))

	(def $replOut ($ "#repl-out"))

	(defn adaptMirror (mirror)
		(! mirror.bind mirror.on)
		(! mirror.unbind mirror.off)
		(.addKeyMap mirror {Enter: (fn () CodeMirror.Pass)}))

	(defn is (x) (fn (y) (= x y)))
	(defn getarg (n) (fn () (get arguments n)))
	(defn eventStream (obj event transform) (Bacon.fromEventTarget obj event transform))

	(adaptMirror mirror)

	(.subscribe
		(.filter
			(eventStream mirror "keyHandled" (getarg 1))
			(is "Enter")) ; todo: is enter and shift isn't pressed...
		(fn (event)
			(processExpression (.getValue mirror))
		))

	(defn processExpression (expr)
		; todo: mocha-script needs try/catch so we can handle parse errors!!
		(eval (+ "__temp = " (.parse mochascriptParser expr)))
		(showResult __temp)
		(.setValue mirror "")
	)

	(defn showResult (result)
		(.append $replOut (+ "<p>" result "</p>"))
		(! (:scrollTop (get $replOut 0) ) (:scrollHeight (get $replOut 0)))
	)

	1
))